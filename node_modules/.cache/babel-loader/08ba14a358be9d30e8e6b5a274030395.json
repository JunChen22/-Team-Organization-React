{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"../security/setJWTToken\";\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    await axios.post(\"/api/user/register\", newUser);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const login = LoginRequest => async dispatch => {\n  try {\n    const request = await axios.post(\"/api/user/login\", LoginRequest);\n    const {\n      token\n    } = request.data;\n    localStorage.setItem(\"jwtToken\", token);\n    setJWTToken(token);\n    const decodedToken = jwt_decode(token);\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decodedToken\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["/home/jun/Desktop/ManagmentSystem-react/src/actions/securityActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","jwt_decode","setJWTToken","createNewUser","newUser","history","dispatch","post","push","type","payload","err","response","data","login","LoginRequest","request","token","localStorage","setItem","decodedToken","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACnE,MAAI;AACF,UAAMR,KAAK,CAACS,IAAN,CAAW,oBAAX,EAAiCH,OAAjC,CAAN;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAdM;AAgBP,OAAO,MAAMC,KAAK,GAAGC,YAAY,IAAI,MAAMT,QAAN,IAAkB;AACrD,MAAI;AACF,UAAMU,OAAO,GAAG,MAAMlB,KAAK,CAACS,IAAN,CAAW,iBAAX,EAA8BQ,YAA9B,CAAtB;AAEA,UAAM;AAAEE,MAAAA;AAAF,QAAYD,OAAO,CAACH,IAA1B;AAEAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAf,IAAAA,WAAW,CAACe,KAAD,CAAX;AAEA,UAAMG,YAAY,GAAGnB,UAAU,CAACgB,KAAD,CAA/B;AAEAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,gBADC;AAEPU,MAAAA,OAAO,EAAEU;AAFF,KAAD,CAAR;AAID,GAdD,CAcE,OAAOT,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CArBM;AAuBP,OAAO,MAAMQ,MAAM,GAAG,MAAMf,QAAQ,IAAI;AACtCY,EAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACApB,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET,gBADC;AAEPU,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;AAID,CAPM","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"../security/setJWTToken\";\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    await axios.post(\"/api/user/register\", newUser);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n\nexport const login = LoginRequest => async dispatch => {\n  try {\n    const request = await axios.post(\"/api/user/login\", LoginRequest);\n\n    const { token } = request.data;\n\n    localStorage.setItem(\"jwtToken\", token);\n    setJWTToken(token);\n\n    const decodedToken = jwt_decode(token);\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decodedToken\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};\n"]},"metadata":{},"sourceType":"module"}